@typeparam TItem
<span>@Title</span>

@*<SfMultiSelect TValue="IEnumerable<TItem>" TItem="ProgrammingLanguage" Placeholder="@Placeholder" DataSource="@AllItems"
               @bind-Value="(context as Project)!.ProgrammingLanguages" Mode="VisualMode.CheckBox">
    <MultiSelectFieldSettings Text="@nameof(ProgrammingLanguage.Name)" />
</SfMultiSelect>
*@
<SfMultiSelect TValue="IEnumerable<string>" TItem="TItem" Placeholder="@Placeholder" DataSource="@AllItems"
               Mode="VisualMode.CheckBox" Value="CurrentValues" ValueChanged="HandleItemsSelection2">
    @*<MultiSelectEvents TValue="IEnumerable<TItem>" TItem="TItem" ValueChange="@HandleItemsSelection" />*@
    <MultiSelectFieldSettings Text="@TextFieldStr" Value="Name"/>
</SfMultiSelect>

@code {
    [Parameter]
    public IEnumerable<TItem> AllItems { get; set; } = null!;

    [Parameter]
    public Func<IEnumerable<string>, Task> SaveAsync { get; set; } = null!;

    [Parameter]
    public IEnumerable<string> CurrentValues { get; set; } = null!;

    [Parameter]
    public string? Placeholder { get; set; }

    [Parameter]
    public string? Title { get; set; }

    [Parameter]
    public string TextFieldStr { get; set; } = null!;

    async Task HandleItemsSelection(MultiSelectChangeEventArgs<IEnumerable<string>> selectedValues)
    {
        Console.WriteLine(selectedValues.Value?.Count() ?? -1);
        await SaveAsync(selectedValues.Value);
    }
    async Task HandleItemsSelection2(IEnumerable<string> selectedValues)
    {
        Console.WriteLine(selectedValues?.Count() ?? -1);
        await SaveAsync(selectedValues);
    }
    //=> await SaveAsync(selectedValues.Value);

}
