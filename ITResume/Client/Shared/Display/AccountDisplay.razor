@using ITResume.Client.Extensions;
@using ITResume.Client.Pages.AccountPages;

<AuthorizeView>
    <Authorized>
        @if (!isDisplay)
        {
            <Spinner />
        }
        else
        {
            <NavLink class="btn btn-link" href="/user/details"> Hello, @userName!</NavLink>
            <button class="btn btn-link" @onclick="LogoutClick">Logout</button>
            @if (isImpersonating)
            {
                <button class="btn btn-warning" @onclick="FinishImpersonating">Finish Impersonating</button>
            }
        }
    </Authorized>
    <NotAuthorized>
        <NavLink class="nav-link btn btn-link" href="/register">@AccountMode.Register</NavLink>
        <NavLink class="nav-link btn btn-link" href="/login">@AccountMode.Login</NavLink>
    </NotAuthorized>
</AuthorizeView>

@code {
    [Inject]
    public NavigationManager NavManager { get; set; } = null!;

    [Inject]
    public CustomStateProvider Auth { get; set; } = null!;

    [Inject]
    public IUserService UserService { get; set; } = null!;

    [CascadingParameter]
    Task<AuthenticationState> AuthStateTask { get; set; } = null!;

    async Task LogoutClick()
    {
        await Auth.Logout();
        NavManager.NavigateTo("/login");
    }

    async Task FinishImpersonating()
    {
        await UserService.DropUsedUserIdAsync(userId!);
        isImpersonating = false;
        await SetUserNameAsync();
        NavManager.NavigateTo(string.Empty);
    }

    string? userId;
    string? userName;
    bool isImpersonating;

    bool isDisplay = false;
    protected override async Task OnParametersSetAsync()
    {
        var claims = (await AuthStateTask).User;
        if (claims.Identity!.IsAuthenticated)
        {
            userId = claims.GetUserId();
            await SetUserNameAsync();
            isImpersonating = await UserService.IsImpersonating(userId!);
        }
        isDisplay = true;
    }

    async Task SetUserNameAsync()
        => userName = await UserService.GetCurrentUserNameAsync();
}