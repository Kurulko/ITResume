@typeparam TModel
@typeparam TKey


@code {
    protected bool isDisplay;
    protected string? error;
    protected SfGrid<TModel> modelGrid = null!;

    protected virtual IEnumerable<string> GetToolbar()
        => Enum.GetValues<Enums.EditMode>().Select(em => em.ToString());

    protected IEnumerable<TModel> models { get; set; } = null!;

    protected bool isAllowPaging;
    protected bool isAllowOperationsWithModels;

    [CascadingParameter(Name = "PageSize")]
    public int PageSize { get; set; }

    protected bool isDetails => RowDetails is not null;

    [Parameter]
    public RenderFragment<TModel>? RowDetails { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; } = null!;

    [Parameter]
    public Func<TModel, TKey> IdFromModel { get; set; } = null!;

    [Parameter]
    public IDbModelService<TModel, TKey> Service { get; set; } = null!;

    [Parameter]
    public Func<Task<IEnumerable<TModel>>>? GetModels { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            await SetModels();
            AssignToIsAllows();
            isDisplay = true;
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
    }

    public async void ActionBeginHandler(ActionEventArgs<TModel> Args)
    {
        try
        {
            TModel model = Args.Data;

            if (Args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
            {
                if (Args.Action == Enums.EditMode.Add.ToString())
                {
                    await Service.AddModelAsync(model);
                    await SetModels();
                    await modelGrid.Refresh();
                }
                else
                    await Service.UpdateModelAsync(model);
            }
            else if (Args.RequestType == Syncfusion.Blazor.Grids.Action.Delete)
                await Service.DeleteModelAsync(IdFromModel(model));

            AssignToIsAllows();
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
    }

    void AssignToIsAllows()
    {
        isAllowPaging = models is not null && models.Count() > PageSize;
        isAllowOperationsWithModels = models is not null && models.Count() > 0;
    }

    async Task SetModels()
        => models = await (GetModels is null ? Service.GetAllModelsAsync() : GetModels());
}
