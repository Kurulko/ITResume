@if (!isDisplay)
{
    <Spinner />
}
else
{
    <center>
        <ShowError Error="@error">
            <SfGrid @ref="modelGrid" DataSource="models" Toolbar="@GetToolbar()" @bind-AllowPaging="@isAllowPaging"
                @bind-AllowSorting="isAllowOperationsWithModels" @bind-AllowFiltering="isAllowOperationsWithModels" Width="50%" ClipMode="ClipMode.EllipsisWithTooltip">
                @if (isDetails)
                {
                    <GridTemplates>
                        <DetailTemplate>
                            <DetailTable>
                                @RowDetails!.Invoke((context as ForeignLanguage)!)
                            </DetailTable>
                        </DetailTemplate>
                    </GridTemplates>
                }
                <GridFilterSettings Mode="FilterBarMode.Immediate" ImmediateModeDelay="200" />
                <GridSortSettings AllowUnsort="false" />
                <GridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="true" />
                @*<GridEvents OnActionBegin="OnActionBegin" TValue="ForeignLanguage" />*@
                <GridEvents OnActionBegin="ActionBeginHandler" TValue="ForeignLanguage" />
                <GridPageSettings PageSize="PageSize" />
                @ChildContent
            </SfGrid>
        </ShowError>
    </center>
}

@code {
    protected bool isDisplay;
    protected string? error;

    //[Parameter]
    //public SfGrid<ForeignLanguage> modelGrid { get; set; } = null!;
    protected SfGrid<ForeignLanguage> modelGrid = null!;

    protected virtual IEnumerable<string> GetToolbar()
        => Enum.GetValues<Enums.EditMode>().Select(em => em.ToString());

    [Parameter]
    public IEnumerable<ForeignLanguage> models { get; set; } = null!;
    //protected IEnumerable<ForeignLanguage> models { get; set; } = null!;

    protected bool isAllowPaging;
    protected bool isAllowOperationsWithModels;

    [CascadingParameter(Name = "PageSize")]
    public int PageSize { get; set; }

    protected bool isDetails => RowDetails is not null;

    [Parameter]
    public RenderFragment<ForeignLanguage>? RowDetails { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; } = null!;

    [Parameter]
    public Func<ForeignLanguage, long> IdFromModel { get; set; } = null!;

    [Parameter]
    public IDbModelService<ForeignLanguage, long> Service { get; set; } = null!;

    [Parameter]
    public EventCallback<ActionEventArgs<ForeignLanguage>> OnActionBegin { get; set; }

    [Inject]
    public IUserService UserService { get; set; } = null!;

    [Parameter]
    public Func<IUserService, Task<IEnumerable<ForeignLanguage>>> GetModels { get; set; } = null!;

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            //await SetModels();
            AssignToIsAllows();
            isDisplay = true;
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
    }

    public async void ActionBeginHandler(ActionEventArgs<ForeignLanguage> Args)
    {
        try
        {
            ForeignLanguage model = Args.Data;
            Console.WriteLine(model.HumanLanguage?.Name ?? "idk");
            if (Args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
            {
                if (Args.Action == Enums.EditMode.Add.ToString())
                {
                    await Service.AddModelAsync(model);
                    await SetModels();
                    await modelGrid.Refresh();
                }
                else
                    await Service.UpdateModelAsync(model);
            }
            else if (Args.RequestType == Syncfusion.Blazor.Grids.Action.Delete)
                await Service.DeleteModelAsync(IdFromModel(model));

            AssignToIsAllows();
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
    }

    void AssignToIsAllows()
    {
        isAllowPaging = models is not null && models.Count() > PageSize;
        isAllowOperationsWithModels = models is not null && models.Count() > 0;
    }

    async Task SetModels()
        => models = await (GetModels is null ? Service.GetAllModelsAsync() : GetModels(UserService));
}
