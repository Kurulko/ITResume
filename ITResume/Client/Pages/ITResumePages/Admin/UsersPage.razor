@page "/users"
@using ITResume.Client.Shared.EditModels.ComplexModels;
@inherits EditComplexDbModels<User, string>
@attribute [Authorize(Roles = Roles.Admin)]

<DisplayNameModels Name="Users" />
<br />
@if (!isDisplay)
{
    <Spinner />
}
else
{
    bool isAllowEditing = true;
    <ShowError Error="@error">
        <SfGrid @ref="modelGrid" DataSource="models" Toolbar="@GetToolbar()" AllowPaging="@isAllowPaging"
            AllowSorting="isAllowOperationsWithModels" AllowGrouping="isAllowOperationsWithModels" ClipMode="ClipMode.EllipsisWithTooltip">
            <ComplexEditDbModelsSettings />
            <GridEvents CommandClicked="OnCommandClicked" OnActionBegin="ActionBeginHandler" TValue="User" />
            <GridPageSettings PageSize="@PageSize" />
            <GridColumns>
                <GridColumn Field=@nameof(User.Id) IsPrimaryKey="true" AllowAdding="false" AllowEditing="false" />
                <GridColumn Field=@nameof(User.UserName) AllowEditing="isAllowEditing" />
                <GridColumn Field=@nameof(User.FirstName) AllowEditing="isAllowEditing" />
                <GridColumn Field=@nameof(User.LastName) AllowEditing="isAllowEditing" />
                <GridColumn Field=@nameof(User.FatherName) AllowEditing="isAllowEditing" />
                <GridColumn Field=@nameof(User.Email) AllowEditing="isAllowEditing" />
                <GridColumn Field=@nameof(User.Birthday) AllowEditing="isAllowEditing" />
                <GridColumn Field=@nameof(User.Registered) AllowEditing="isAllowEditing" />
                <GridColumn HeaderText="Roles" AllowAdding=false>
                    <Template>
                        @{
                            usersRoles!.TryGetValue(((User)context)!.Id, out List<string>? roles);
                        }
                        @if (roles is not null)
                        {
                            @string.Join(",", roles)
                        }
                    </Template>
                    <EditTemplate>
                        @{
                            User user = (context as User)!;

                            string password = string.Empty;

                            usersRoles!.TryGetValue(((User)context)!.Id, out List<string>? roles);

                            async Task HandleRoleSelection(IEnumerable<string> selectedValues)
                            {
                                if (selectedValues is not null)
                                {
                                    foreach (var newRole in selectedValues.Except(roles))
                                        await UserService.AddRoleToUserAsync(new(user.Id, newRole));

                                    foreach (var oldRole in roles.Except(selectedValues))
                                        await UserService.DeleteRoleFromUserAsync(new(user.Id, oldRole));

                                    await SetUserRoles();
                                }
                            }

                            async Task HandlePasswordSelection(string? password)
                            {
                                if (password is not null)
                                    await UserService.AddUserPasswordAsync(new(user.Id, password));
                            }
                        }
                        @if (roles is not null)
                        {
                            <MultiSelect AllItems="allRoles" CurrentValues="roles" CurrentValuesChanged="HandleRoleSelection"
                                 Placeholder="Roles" Title="Roles" />

                            @if (!HasUserPassword(user))
                            {
                                <br />
                                <br />
                                <span>Password</span>
                                <SfTextBox Value="@password" ValueChanged="HandlePasswordSelection" Type="InputType.Password" Placeholder="Password" />
                            }
                        }
                    </EditTemplate>
                </GridColumn>
                <GridColumn>
                    <GridCommandColumns>
                        <GridCommandColumn ButtonOption="@(new CommandButtonOptions() {
                            Content = "Impersonate", CssClass = "e-outline" })" />
                    </GridCommandColumns>
                </GridColumn>
            </GridColumns>
        </SfGrid>
    </ShowError>
}

@code {
    IEnumerable<string>? allRoles;
    Dictionary<string, List<string>>? usersRoles;

    [Inject]
    public IUserService UserService { get; set; } = null!;

    [Inject]
    public IRoleService RoleService { get; set; } = null!;

    [Inject]
    public NavigationManager NavManager { get; set; } = null!;

    [Inject]
    public IJSRuntime JSRuntime { get; set; } = null!;

    protected override IDbModelService<User, string> Service => UserService;

    protected override string GetKeyFromModel(User model)
        => model.Id;

    async Task OnCommandClicked(CommandClickEventArgs<User> args)
    {
        if (args.CommandColumn.ButtonOption.Content == "Impersonate")
        {
            string userId = (await UserService.GetUserByClaimsAsync(default!))!.Id;
            string usedUserId = args.RowData.Id;
            await UserService.ChangeUsedUserIdAsync(userId, usedUserId);

            NavManager.NavigateTo(string.Empty);
            await JSRuntime.InvokeVoidAsync("location.reload");
        }
    }

    string GetDialogHeader(User user)
        => string.IsNullOrEmpty(user.Id) ? "Add New User" : $"Edit {user.UserName} Details";


    public override async void ActionBeginHandler(ActionEventArgs<User> args)
    {
        try
        {
            User? user = args.Data;

            if (args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
            {
                if (args.Action == Enums.EditMode.Add.ToString())
                    await UserService.AddModelAsync(user);
                else if (args.Action == Enums.EditMode.Edit.ToString())
                    await UserService.UpdateModelAsync(user);

                await Refresh();
            }
            else if (args.RequestType == Syncfusion.Blazor.Grids.Action.Delete)
            {
                await UserService.DeleteModelAsync(user!.Id);
                await Refresh();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("ERROR: " + ex);
            error = ex.Message;
        }
    }


    protected override async Task SetModels()
    {
        models = await UserService.GetAllModelsAsync();
        allRoles = (await RoleService.GetAllModelsAsync()).Select(r => r.Name);
        await SetUserRoles();
    }

    async Task SetUserRoles()
    {
        var urs = models.Select(async u => new KeyValuePair<string, List<string>>(u.Id, (await UserService.GetRolesAsync(u.Id)).ToList()));

        List<KeyValuePair<string, List<string>>> ursList = new();
        foreach (var ur in urs)
        {
            KeyValuePair<string, List<string>> urItem = await ur;
            ursList.Add(urItem);
        }

        usersRoles = new Dictionary<string, List<string>>(ursList);
    }

    bool HasUserPassword(User user)
        => !string.IsNullOrEmpty(user.PasswordHash);
}