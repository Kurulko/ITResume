@page "/experience"
@inherits EditComplexSkillUserITResumeDbModels<Employee>


<DisplayNameModels Name="Experience" />
<br />
@if (!isDisplay)
{
    <Spinner />
}
else
{
    <ShowError Error="@error">
        <SfGrid @ref="modelGrid" DataSource="models" Toolbar="@GetToolbar()" AllowPaging="@isAllowPaging"
            AllowSorting="isAllowOperationsWithModels" AllowGrouping="isAllowOperationsWithModels" ClipMode="ClipMode.EllipsisWithTooltip">
            <ComplexEditDbModelsSettings />
            <GridEvents OnActionBegin="ActionBeginHandler" TValue="Employee" />
            <GridPageSettings PageSize="PageSize" />
            <GridColumns>
                <GridColumn Field=@nameof(Employee.Id) AllowAdding="false" AllowGrouping=false />
                <GridColumn Field=@nameof(Employee.Post) />
                <GridColumn Field=@nameof(Employee.StartWorking) />
                <GridColumn Field=@nameof(Employee.FinishWorking) />
                <GridColumn Field=@nameof(Employee.Salary) />
                <GridColumn Field=@nameof(Employee.Description)>
                    <EditTemplate>
                        <span>Description</span>
                        <SfTextBox @bind-Value="(context as Employee)!.Description" Multiline=true />
                    </EditTemplate>
                </GridColumn>
                <GridColumn Field="Company.Name" HeaderText="Company">
                    <Template>
                        @(((Employee)context)!.Company?.Name ?? string.Empty)
                    </Template>
                    <EditTemplate>
                        @{
                            Employee employee = context as Employee ?? new();
                            async Task CompanyChanged(string? companyName)
                            {
                                employee.Company = companyName is not null ?
                                await CompanyService.GetModelByUniqueNameAsync(companyName)
                                : default;
                            }
                        }
                        <span>Company</span>
                        <SfTextBox @bind-Value="employee.Company!.Name" />
                        <center>or</center>
                        <Select AllItems="allCompaniesStr" CurrentValue="@employee.Company!.Name" CurrentValueChanged="CompanyChanged" Placeholder="Company" />
                    </EditTemplate>
                </GridColumn>
                <GridColumn Field=@nameof(Employee.ProgrammingLanguages) HeaderText="Languages" AllowGrouping="false" AllowSorting="false">
                    <Template>
                        @StringExtensions.ToString((context as Employee)!.ProgrammingLanguages)
                    </Template>
                    <EditTemplate>
                        @{
                            Employee employee = context as Employee ?? new();
                            List<string>? programmingLanguagesStr = employee.ProgrammingLanguages?.SelectName()?.ToList();

                            async Task ProgrammingLanguagesChanged(IEnumerable<string>? programmingLanguagesStr)
                                => employee.ProgrammingLanguages = allLanguages!.WhereNameContainsInStrCollection(programmingLanguagesStr);
                        }
                        <MultiSelect AllItems="allLanguagesStr" CurrentValues="programmingLanguagesStr" CurrentValuesChanged="ProgrammingLanguagesChanged"
                                 Placeholder="Languages" Title="Languages" />
                    </EditTemplate>
                </GridColumn>
                <GridColumn Field=@nameof(Employee.Technologies) HeaderText="Technologies" AllowGrouping="false" AllowSorting="false">
                    <Template>
                        @StringExtensions.ToString((context as Employee)!.Technologies)
                    </Template>
                    <EditTemplate>
                        @{
                            Employee employee = context as Employee ?? new();
                            List<string>? technologiesStr = employee.Technologies?.SelectName()?.ToList();

                            void TechnologiesChanged(IEnumerable<string>? technologiesStr)
                                => employee.Technologies = allTechnologies!.WhereNameContainsInStrCollection(technologiesStr);
                        }
                        <MultiSelect AllItems="allTechnologiesStr" CurrentValues="technologiesStr" CurrentValuesChanged="TechnologiesChanged"
                                 Placeholder="Technologies" Title="Technologies" />
                    </EditTemplate>
                </GridColumn>
            </GridColumns>
            <GridTemplates>
                <DetailTemplate>
                    <DetailTable>
                        @((context as Employee)!.Description)
                    </DetailTable>
                </DetailTemplate>
            </GridTemplates>
        </SfGrid>
    </ShowError>
}


@code {
    IEnumerable<Company>? allCompanies;
    IEnumerable<string>? allCompaniesStr;

    [Inject]
    public IEmployeeService EmployeeService { get; set; } = null!;

    [Inject]
    public ICompanyService CompanyService { get; set; } = null!;

    protected override IDbModelService<Employee, long> Service => EmployeeService;

    protected override async Task<IEnumerable<Employee>> GetModels()
        => await UserService.GetCurrentUserEmployeesAsync();


    protected override async Task<Employee> PrepareModel(Employee employee)
    {
        string? companyName = employee.Company!.Name;
        long companyId = employee.Company!.Id;
        employee.Company = null;

        if (companyName is not null)
        {
            if (companyId == 0)
            {
                Company? company = await CompanyService.GetModelByUniqueNameAsync(companyName);

                if (company is null || company is { })
                    company = await CompanyService.AddModelAsync(new() { Name = companyName });

                employee.CompanyId = company!.Id;
            }
            else
                employee.CompanyId = companyId;
        }

        return employee;
    }

    protected override async Task SetModels()
    {
        models = await UserService.GetCurrentUserEmployeesAsync();
        allCompanies = await CompanyService.GetAllModelsAsync();
        allCompaniesStr = allCompanies.SelectName();
    }
}
