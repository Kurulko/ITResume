@page "/foreign-languages"
@inherits EditComplexITResumeDbModels<ForeignLanguage>

@if (!isDisplay)
{
    <Spinner />
}
else
{
    <center>
        <ShowError Error="@error">
            <SfGrid @ref="modelGrid" DataSource="models" Toolbar="@GetToolbar()" AllowPaging="@isAllowPaging"
                AllowSorting="isAllowOperationsWithModels" AllowGrouping="isAllowOperationsWithModels" ClipMode="ClipMode.EllipsisWithTooltip" Width="50%">
                <SimpleEditDbModelsSettings />
                <GridEvents OnActionBegin="ActionBeginHandler" TValue="ForeignLanguage" />
                <GridPageSettings PageSize="PageSize" />
                <GridColumns>
                    <GridColumn Field=@nameof(ForeignLanguage.HumanLanguageId) HeaderText="Name">
                        <Template>
                            @(((ForeignLanguage)context)!.HumanLanguage?.Name)
                        </Template>
                        <EditTemplate>
                            @{
                                ForeignLanguage language = (context as ForeignLanguage)!;
                                async Task HumanLanguageChanged(string? humanLanguageName)
                                {
                                    if (!string.IsNullOrEmpty(humanLanguageName))
                                        language.HumanLanguageId = (await HumanLanguageService.GetModelByUniqueNameAsync(humanLanguageName))!.Id;
                                }
                            }
                            <Select AllItems="humanLanguagesStr" CurrentValue="@language.HumanLanguage?.Name" CurrentValueChanged="HumanLanguageChanged"
                                Placeholder="Language" />
                        </EditTemplate>
                    </GridColumn>
                    <GridColumn Field=@nameof(ForeignLanguage.LanguageLevel)>
                        <EditTemplate>
                            <SfDropDownList ID="LanguageLevel" TItem="string" TValue="LanguageLevel"
                                        @bind-Value="@((context as ForeignLanguage)!.LanguageLevel)"
                                        DataSource="@languageLevelEnumValues" />
                        </EditTemplate>
                    </GridColumn>
                </GridColumns>
            </SfGrid>
        </ShowError>
    </center>
}

@code {
    string[] languageLevelEnumValues = Enum.GetNames<LanguageLevel>();

    IEnumerable<HumanLanguage>? humanLanguages;
    IEnumerable<string>? humanLanguagesStr;

    [Inject]
    public IForeignLanguageService ForeignLanguageService { get; set; } = null!;

    [Inject]
    public IHumanLanguageService HumanLanguageService { get; set; } = null!;

    [Inject]
    public IUserService UserService { get; set; } = null!;

    protected override async Task<IEnumerable<ForeignLanguage>> GetModels()
    => await UserService.GetCurrentUserForeignLanguagesAsync();

    protected override IDbModelService<ForeignLanguage, long> Service => ForeignLanguageService;


    protected override async Task OnInitializedAsync()
    {
        try
        {
            humanLanguages = await HumanLanguageService.GetAllModelsAsync();
            humanLanguagesStr = humanLanguages.SelectName();

            await base.OnInitializedAsync();
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
    }
}
