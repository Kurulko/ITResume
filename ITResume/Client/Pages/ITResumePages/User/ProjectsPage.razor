@page "/projects"
@inherits EditComplexSkillUserITResumeDbModels<Project>


<DisplayNameModels Name="Projects" />
<br />
@if (!isDisplay)
{
    <Spinner />
}
else
{
    <ShowError Error="@error">
        <SfGrid @ref="modelGrid" DataSource="models" Toolbar="@GetToolbar()" AllowPaging="@isAllowPaging"
            AllowSorting="isAllowOperationsWithModels" AllowGrouping="isAllowOperationsWithModels" ClipMode="ClipMode.EllipsisWithTooltip">
            <ComplexEditDbModelsSettings />
            <GridEvents OnActionBegin="ActionBeginHandler" TValue="Project" />
            <GridPageSettings PageSize="PageSize" />
            <GridColumns>
                <GridColumn Field=@nameof(Project.Id) AllowAdding="false" AllowGrouping=false />
                <GridColumn Field=@nameof(Project.Name) />
                <GridColumn Field=@nameof(Project.Github) />
                <GridColumn Field=@nameof(Project.WorkExample) />
                <GridColumn Field=@nameof(Project.Description)>
                    <EditTemplate>
                        <span>Description</span>
                        <SfTextBox @bind-Value="(context as Project)!.Description" Multiline=true />
                    </EditTemplate>
                </GridColumn>
                <GridColumn Field=@nameof(Project.StartDoing) />
                <GridColumn Field=@nameof(Project.FinishDoing) />
                <GridColumn Field=@nameof(Project.ProgrammingLanguages) HeaderText="Languages" AllowGrouping="false" AllowSorting="false">
                    <Template>
                        @StringExtensions.ToString((context as Project)!.ProgrammingLanguages)
                    </Template>
                    <EditTemplate>
                        @{
                            Project project = context as Project ?? new();
                            List<string>? programmingLanguagesStr = project.ProgrammingLanguages?.SelectName()?.ToList();
                            async Task ValueChanged(IEnumerable<string>? programmingLanguagesStr)
                            => project.ProgrammingLanguages = allLanguages!.WhereNameContainsInStrCollection(programmingLanguagesStr);
                        }
                        <MultiSelect AllItems="allLanguagesStr" CurrentValues="programmingLanguagesStr" CurrentValuesChanged="ValueChanged"
                                 Placeholder="Languages" Title="Languages" />
                    </EditTemplate>
                </GridColumn>
                <GridColumn Field=@nameof(Project.Technologies) HeaderText="Technologies" AllowGrouping="false" AllowSorting="false">
                    <Template>
                        @StringExtensions.ToString((context as Project)!.Technologies)
                    </Template>
                    <EditTemplate>
                        @{
                            Project project = context as Project ?? new();
                            List<string>? technologiesStr = project.Technologies?.SelectName()?.ToList();
                            async Task ValueChanged(IEnumerable<string>? technologiesStr)
                            => project.Technologies = allTechnologies!.WhereNameContainsInStrCollection(technologiesStr);
                        }
                        <MultiSelect AllItems="allTechnologiesStr" CurrentValues="technologiesStr" CurrentValuesChanged="ValueChanged"
                                 Placeholder="Technologies" Title="Technologies" />
                    </EditTemplate>
                </GridColumn>
            </GridColumns>
            <GridTemplates>
                <DetailTemplate>
                    <DetailTable>
                        @((context as Project)!.Description)
                    </DetailTable>
                </DetailTemplate>
            </GridTemplates>
        </SfGrid>
    </ShowError>
}


@code {
    [Inject]
    public IProjectService ProjectService { get; set; } = null!;

    protected override async Task<IEnumerable<Project>> GetModels()
        => await UserService.GetCurrentUserProjectsAsync();

    protected override IDbModelService<Project, long> Service => ProjectService;
}
