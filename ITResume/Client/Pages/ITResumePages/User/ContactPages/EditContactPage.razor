@page "/contact/edit"
@using ITResume.Client.Parser;
@inherits _UserLayout

<DisplayNameEdit Name="@nameof(Contact)" />
@if (contact is null)
{
    <Spinner />
}
else
{
    <SimpleForm Model="@contact" DoAction="Action" Mode="@ITResume.Client.Enums.EditMode.Edit.ToString()">
        <div class="form-group">
            <DisplayName For="(() => contact.Email)" />
            <SfTextBox @bind-Value="contact.Email" Placeholder="Email" />
            <ValidationMessage For="@(() => contact.Email)" />
        </div>
        <br />
        <div class="form-group">
            <DisplayName For="(() => contact.MobilePhone)" />
            <SfTextBox @bind-Value="contact.MobilePhone" Placeholder="MobilePhone" />
            <ValidationMessage For="@(() => contact.MobilePhone)" />
        </div>
        <br />
        <div class="form-group">
            <div class="row">
                <div class="col-md-8">

                    <DisplayName For="(() => contact.Github)" />
                    <SfTextBox @bind-Value="contact.Github" Placeholder="Github" />
                    <ValidationMessage For="@(() => contact.Github)" />
                </div>
                <div class="col-md-4">
                    <span>Parse Github?</span><br>
                    <SfCheckBox @bind-Checked="isParseGithub" />
                </div>
            </div>
        </div>
        <br />
        <div class="form-group">
            <DisplayName For="(() => contact.LinkedId)" />
            <SfTextBox @bind-Value="contact.LinkedId" Placeholder="LinkedId" />
            <ValidationMessage For="@(() => contact.LinkedId)" />
        </div>
        <br />
        <div class="form-group">
            <DisplayName For="(() => contact.Habr)" />
            <SfTextBox @bind-Value="contact.Habr" Placeholder="Habr" />
            <ValidationMessage For="@(() => contact.Habr)" />
        </div>
        <br />
        <div class="form-group">
            <DisplayName For="(() => contact.Stackoverflow)" />
            <SfTextBox @bind-Value="contact.Stackoverflow" Placeholder="Stackoverflow" />
            <ValidationMessage For="@(() => contact.Stackoverflow)" />
        </div>
        <br />
        <div class="form-group">
            <DisplayName For="(() => contact.Telegram)" />
            <SfTextBox @bind-Value="contact.Telegram" Placeholder="Telegram" />
            <ValidationMessage For="@(() => contact.Telegram)" />
        </div>
        <br />
        <div class="form-group">
            <label>From</label>
            <SfDropDownList TItem="Country" TValue="long?" DataSource="@countries"
                        @bind-Value="@(contact.CountryId)" AllowFiltering=true Placeholder="Countries">
                <DropDownListFieldSettings Text="Name" Value="Id" />
            </SfDropDownList>
        </div>
        <br />
    </SimpleForm>
}

@code {
    bool isParseGithub;
    Contact? contact;

    [Inject]
    public NavigationManager NavManager { get; set; } = null!;

    [Inject]
    public IContactService ContactService { get; set; } = null!;

    [Inject]
    public ICountryService CountryService { get; set; } = null!;

    [Inject]
    public IProjectService ProjectService { get; set; } = null!;

    [Inject]
    public IProgrammingLanguageService ProgrammingLanguageService { get; set; } = null!;

    IEnumerable<Country>? countries;
    protected override async Task OnInitializedAsync()
    {
        contact = await UserService.GetCurrentUserContactAsync();
        countries = await CountryService.GetAllModelsAsync();
    }

    async Task Action()
    {
        await ContactService.UpdateModelAsync(contact!);
        await ParseGithub();
        NavManager.NavigateTo("contact");
    }

    async Task ParseGithub()
    {
        string? github = contact?.Github;
        if (isParseGithub && !string.IsNullOrEmpty(github))
        {
            GithubParser githubParser = new(github);
            await githubParser.ParseAsync();

            var projects = githubParser.Projects;
            if (projects.IsCountOverZero())
            {
                foreach (Project project in projects)
                {
                    var languages = project!.ProgrammingLanguages;
                    project.ProgrammingLanguages = null;

                    long projectId = (await ProjectService.AddModelAsync(project)).Id;

                    if (languages is not null)
                    {
                        foreach (ProgrammingLanguage language in languages)
                        {
                            Console.WriteLine(language.Name);
                            var _language = await ProgrammingLanguageService.GetModelByUniqueNameAsync(language.Name);

                            //if (_language is null)
                            //    _language = await ProgrammingLanguageService.AddModelAsync(language);

                            if (_language is not null)
                                await ProjectService.AddProgrammingLanguageToModel(projectId, _language.Id);
                        }
                    }
                }
            }
        }
    }

}
