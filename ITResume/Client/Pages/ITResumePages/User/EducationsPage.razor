@page "/educations"
@inherits EditComplexITResumeDbModels<Education>

<DisplayNameModels Name="Educations" />
<br />
@if (!isDisplay)
{
    <Spinner />
}
else
{
    <ShowError Error="@error">
        <SfGrid @ref="modelGrid" DataSource="models" Toolbar="@GetToolbar()" AllowPaging="@isAllowPaging"
            AllowSorting="isAllowOperationsWithModels" AllowGrouping="isAllowOperationsWithModels" ClipMode="ClipMode.EllipsisWithTooltip">
            <ComplexEditDbModelsSettings />
            <GridEvents OnActionBegin="ActionBeginHandler" TValue="Education" />
            <GridPageSettings PageSize="PageSize" />
            <GridColumns>
            <GridColumn Field=@nameof(Education.University) />
            <GridColumn Field=@nameof(Education.Faculty) />
            <GridColumn Field=@nameof(Education.Specialty) />
            <GridColumn Field=@nameof(Education.TypeOfEducation)>
                <EditTemplate>
                    <SfDropDownList ID="TypeOfEducation" TItem="string" TValue="TypeOfEducation"
                                    @bind-Value="@((context as Education)!.TypeOfEducation)"
                                    DataSource="@typeOfEducationEnumValues" />
                </EditTemplate>
            </GridColumn>
            <GridColumn Field=@nameof(Education.DegreeOfEducation)>
                <EditTemplate>
                    <SfDropDownList ID="DegreeOfEducation" TItem="string" TValue="DegreeOfEducation"
                                    @bind-Value="@((context as Education)!.DegreeOfEducation)"
                                    DataSource="@degreeOfEducationEnumValues" />
                </EditTemplate>
            </GridColumn>
            <GridColumn Field=@nameof(Education.StartEducation) />
            <GridColumn Field=@nameof(Education.FinishEducation) />
            </GridColumns>
        </SfGrid>
    </ShowError>
}


@code {
    string[] typeOfEducationEnumValues = Enum.GetNames<TypeOfEducation>();
    string[] degreeOfEducationEnumValues = Enum.GetNames<DegreeOfEducation>();

    [Inject]
    public IEducationService EducationService { get; set; } = null!;

    [Inject]
    public IUserService UserService { get; set; } = null!;

    protected override async Task<IEnumerable<Education>> GetModels()
        => await UserService.GetCurrentUserEducationsAsync();

    protected override IDbModelService<Education, long> Service => EducationService;
}
